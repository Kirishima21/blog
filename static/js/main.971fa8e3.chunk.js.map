{"version":3,"sources":["PageTitle.js","appDispatcher.js","actions.js","navigationBar/navigationBar.js","store.js","contentsAria/mainAria/mainAria.js","contentsAria/subAria/subAria.js","contentsAria/contentsAria.js","footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","props","className","src","React","Component","appDispatcher","Dispatcher","ActionType","Actions","dispatch","actionType","NavigationBar","type","value","onClick","pageStore","page","onChange","register","payload","MainAria","state","setState","this","SubAria","ContentsAria","footer","App","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.971fa8e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass PageTitle extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img className=\"titleImage\" src=\"title.svg\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PageTitle;","import {Dispatcher} from \"flux\";\r\n\r\nexport const appDispatcher = new Dispatcher()","import {appDispatcher} from \"./appDispatcher\";\r\n\r\nexport const ActionType = {\r\n  CHANGE_PAGE_TOP: \"CHANGE_PAGE_TOP\",\r\n  CHANGE_PAGE_ABOUT: \"CHANGE_PAGE_ABOUT\",\r\n  CHANGE_PAGE_PRODUCT: \"CHANGE_PAGE_PRODUCT\",\r\n  CHANGE_PAGE_BLOG: \"CHANGE_PAGE_BLOG\",\r\n  CHANGE_PAGE_CONTACT: \"CHANGE_PAGE_CONTACT\"\r\n}\r\n\r\nexport const Actions ={\r\n  changePageTop: () => {\r\n    appDispatcher.dispatch({\r\n      actionType: ActionType.CHANGE_PAGE_TOP,\r\n    })\r\n  },\r\n  changePageAbout: () => {\r\n    appDispatcher.dispatch({\r\n      actionType: ActionType.CHANGE_PAGE_ABOUT,\r\n    })\r\n  },\r\n  changePageProduct: () => {\r\n    appDispatcher.dispatch({\r\n      actionType: ActionType.CHANGE_PAGE_PRODUCT,\r\n    })\r\n  },\r\n  changePageBlog: () => {\r\n    appDispatcher.dispatch({\r\n      actionType: ActionType.CHANGE_PAGE_BLOG,\r\n    })\r\n  },\r\n  changePageContact: () => {\r\n    appDispatcher.dispatch({\r\n      actionType: ActionType.CHANGE_PAGE_CONTACT,\r\n    })\r\n  }\r\n}","import React from \"react\";\r\nimport {Actions} from \"../actions\";\r\n\r\nconst top = function () {\r\n  Actions.changePageTop()\r\n}\r\n\r\nconst about = function () {\r\n  Actions.changePageAbout()\r\n}\r\n\r\nconst product = function () {\r\n  Actions.changePageProduct()\r\n}\r\n\r\nconst blog = function () {\r\n  Actions.changePageBlog()\r\n}\r\n\r\nconst contact = function () {\r\n  Actions.changePageContact()\r\n}\r\n\r\nclass NavigationBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"NavigationMenu\">\r\n        <div className=\"top\">\r\n          <input type=\"button\" value=\"top\" onClick={() => { top() }}></input>\r\n        </div>\r\n        <div className=\"about\">\r\n          <input type=\"button\" value=\"about\" onClick={() => { about() }}></input>\r\n        </div>\r\n        <div className=\"product\">\r\n          <input type=\"button\" value=\"product\" onClick={() => { product() }}></input>\r\n        </div>\r\n        <div className=\"blog\">\r\n          <input type=\"button\" value=\"blog\" onClick={() => { blog() }}></input>\r\n        </div>\r\n        <div className=\"contact\">\r\n          <input type=\"button\" value=\"contact\" onClick={() => { contact() }}></input>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavigationBar ;","import {appDispatcher} from \"./appDispatcher\";\r\n\r\nexport const pageStore = { page: \"top\", onChange: null}\r\n\r\nexport const ActionType = {\r\n  CHANGE_PAGE_TOP: \"CHANGE_PAGE_TOP\",\r\n  CHANGE_PAGE_ABOUT: \"CHANGE_PAGE_ABOUT\",\r\n  CHANGE_PAGE_PRODUCT: \"CHANGE_PAGE_PRODUCT\",\r\n  CHANGE_PAGE_BLOG: \"CHANGE_PAGE_BLOG\",\r\n  CHANGE_PAGE_CONTACT: \"CHANGE_PAGE_CONTACT\"\r\n}\r\n\r\nappDispatcher.register(payload => {\r\n  if(payload.actionType === ActionType.CHANGE_PAGE_TOP) {\r\n    pageStore.page = \"top\"\r\n    pageStore.onChange()\r\n  }\r\n  if(payload.actionType === ActionType.CHANGE_PAGE_ABOUT) {\r\n    pageStore.page = \"about\"\r\n    pageStore.onChange()\r\n  }\r\n  if(payload.actionType === ActionType.CHANGE_PAGE_PRODUCT) {\r\n    pageStore.page = \"product\"\r\n    pageStore.onChange()\r\n  }\r\n  if(payload.actionType === ActionType.CHANGE_PAGE_BLOG) {\r\n    pageStore.page = \"blog\"\r\n    pageStore.onChange()\r\n  }\r\n  if(payload.actionType === ActionType.CHANGE_PAGE_CONTACT) {\r\n    pageStore.page = \"contact\"\r\n    pageStore.onChange()\r\n  }\r\n})","import React from \"react\"\r\nimport {pageStore} from \"../../store\"\r\n\r\nclass MainAria extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state ={\r\n      page: pageStore.page\r\n    }\r\n\r\n    pageStore.onChange = () => {\r\n      this.setState({page: pageStore.page})\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"MainAria\" >\r\n        MainAria <br />\r\n        {this.state.page}を表示します\r\n        MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />MainAria <br />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainAria;","import React from \"react\";\r\n\r\nclass SubAria extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"SubAria\" >SubAria</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubAria;","import React from \"react\";\r\nimport MainAria from \"./mainAria/mainAria\";\r\nimport SubAria from \"./subAria/subAria\";\r\n\r\nclass ContentsAria extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"ContentsAria\">\r\n        <MainAria/>\r\n        <SubAria/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContentsAria;","import React from \"react\";\r\n\r\nclass footer extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  render(){\r\n    return(\r\n      <div>footer</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default footer;","import React from 'react';\nimport './App.css';\nimport PageTitle from './PageTitle'\nimport NavigationBar from './navigationBar/navigationBar';\nimport ContentsAria from './contentsAria/contentsAria';\nimport Footer from './footer/footer';\n\nfunction App() {\n  return (\n    <div className=\"containar\">\n      <div className=\"Pagetitle\">\n        <PageTitle />\n      </div>\n      <div className=\"Navigation\">\n        <NavigationBar />\n      </div>\n      <div className=\"Contents\">\n        <ContentsAria />\n      </div>\n      <div className=\"Footer\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <App/>\n  , rootElement\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}